// const animal = {
//  walk: () =>{
//     console.log('walk')
//   },
//    run : ()=>{
//     console.log('run')
//   },
//   eat: ()=>{
//     console.log('eat')
//   },
//   fur: 'black'
// }

// const cheetah ={
//   fur: 'yellow'
// }

// cheetah.__proto__ = animal;
// cheetah.walk();
// cheetah.fur;
// cheetah.__proto__.fur

// [[Prototype]] = undefined

// eat, sleep, walk, 

const animal = {
  fur: 'black',
  eat: () => {
    console.log('eating');
    console.log(`${this.name} pretends to eat`);
  },
  sleep: () => {
    console.log('pretends to sleep');
  },
  walk: () => {
    console.log('pretends to walk');
  },
}

const lion = {
  fur: 'yellow',
  name: 'lion'
}

const rabbit = {
  name: 'rabbit',
  fur: 'white',
  __proto__: animal,
}
//[[Prototype]] = undefined -> [[Prototype]] = animal
// lion.__proto__ = animal;
// rabbit.__proto__ = animal;

// rabbit.eat(rabbit.name);


const Animal = function(name) {
  this.name = name;
}

Animal.prototype = animal;

const Rabbit = new Animal('rabbit');
Rabbit.eat();




// const cheetah

// const sym = Symbol('hello');
// const sym1 = Symbol('hello');

// sym === sym


// //Input 
// // "cat"

// let sset = new Set();

// const setup = (input) =>{
//   sset = new Set(input)
// }

// const isInDict = (word) =>{
//   return sset.length <1 ?  false : sset.has(word);
// }

// setup(['hello', 'world', 'how'])
// console.log('is in dic')
// isInDict('hello')
// isInDict('yolo')
// isInDict('world')

// const a =[0,1,2,3];a.slice(0,5)


// "   -42".trim();

// +'0001'

// const set = new Set([1,2,3,5,4,8]);

// set.add(88)
// set.delete(88)
// set.has(88)

// console.log('------------------------------------------------------------------')
// set.size

// Array.from(set);

// const map = new Map([['asdh', 5], ['hello', 55], ['whatever', 95]])

// map.set('m0', 88)
// map.has('m0')
// map.delete('m0');
// map['m0']

// console.log('test is here ----------------------')
// const [firstElement] = map.keys();
// firstElement

// 'hello'
// const entry = map.entries();

// for(let e of entry){
//   console.log(e)
// }

// 'hgello'

// map.get('asdh')

// const test = 0 && 1;

// if(test){
//   console.log(true);
// }else{
//   console.log(false);
  
// }

// const s= [a, b, c,d]
// s.map(v => v=='d'? 'd': undefined)



// const minNumInArr = (arr) => {
//   const sorted = arr.sort((a, b)=> a-b);
  
//   for(let i = 0; i< sorted.length-1; i++){
//       let first = sorted[i];
//       let second = sorted[i+1];
//       if(second - first > 1 ){
//         return first+1;
//       }   
//   }
  
//   return sorted[sorted.length-1] +1;
// }

// minNumInArr([1,2,3,4,5,6,7])

// const emojify = (message, emoji) => {
//   const invalidMsg = 'invalid string';
  
//   try{
//     let str = message.toString();
//     str = str.replaceAll('\t\r', ' ');
//     console.log({str})
//     const tokens = str.split(' ');
//     console.log({tokens});
  
//     if(tokens.length <=1){
//       return invalidMsg;
//     }
//     const answer = str.replaceAll(' ', emoji);
//     return answer;
//   }catch(e) {
//     return invalidMsg;
//   }
//   return invalidMsg;
// }

// emojify(' ','ðŸ˜Š');

// emojify('hello','ðŸ˜Š');
// emojify({hello: 'world'},'ðŸ˜Š');
// emojify([1,2,3,4,5,6,7], 'ðŸ˜Š');
// emojify(['123 ', 'hello world'], 'ðŸ˜Š');
// emojify('  hello world','ðŸ˜Š');
// emojify('\ttab\rcarriage_return', 'ðŸ˜Š');

// const map = new Map();
// map.size;

// const func = function(){
//   console.log('hllo world')
// }

// func();

